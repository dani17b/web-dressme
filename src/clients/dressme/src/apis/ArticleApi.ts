/* tslint:disable */
/* eslint-disable */
/**
 * DressMe API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Article,
  ArticleResponse,
} from '../models/index';
import {
    ArticleFromJSON,
    ArticleToJSON,
    ArticleResponseFromJSON,
    ArticleResponseToJSON,
} from '../models/index';

export interface CreateArticleRequest {
    article: Article;
}

export interface GetArticlesRequest {
    keys?: Array<string>;
}

export interface UpdateArticleRequest {
    article: Article;
}

/**
 * ArticleApi - interface
 * 
 * @export
 * @interface ArticleApiInterface
 */
export interface ArticleApiInterface {
    /**
     * 
     * @param {Article} article 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApiInterface
     */
    createArticleRaw(requestParameters: CreateArticleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Article>>;

    /**
     */
    createArticle(requestParameters: CreateArticleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Article>;

    /**
     * 
     * @param {Array<string>} [keys] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApiInterface
     */
    getArticlesRaw(requestParameters: GetArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ArticleResponse>>>;

    /**
     */
    getArticles(requestParameters: GetArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ArticleResponse>>;

    /**
     * 
     * @param {Article} article 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApiInterface
     */
    updateArticleRaw(requestParameters: UpdateArticleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Article>>;

    /**
     */
    updateArticle(requestParameters: UpdateArticleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Article>;

}

/**
 * 
 */
export class ArticleApi extends runtime.BaseAPI implements ArticleApiInterface {

    /**
     */
    async createArticleRaw(requestParameters: CreateArticleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Article>> {
        if (requestParameters['article'] == null) {
            throw new runtime.RequiredError(
                'article',
                'Required parameter "article" was null or undefined when calling createArticle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/article`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArticleToJSON(requestParameters['article']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleFromJSON(jsonValue));
    }

    /**
     */
    async createArticle(requestParameters: CreateArticleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Article> {
        const response = await this.createArticleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getArticlesRaw(requestParameters: GetArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ArticleResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['keys'] != null) {
            queryParameters['keys'] = requestParameters['keys'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/article`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ArticleResponseFromJSON));
    }

    /**
     */
    async getArticles(requestParameters: GetArticlesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ArticleResponse>> {
        const response = await this.getArticlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateArticleRaw(requestParameters: UpdateArticleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Article>> {
        if (requestParameters['article'] == null) {
            throw new runtime.RequiredError(
                'article',
                'Required parameter "article" was null or undefined when calling updateArticle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/article`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ArticleToJSON(requestParameters['article']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleFromJSON(jsonValue));
    }

    /**
     */
    async updateArticle(requestParameters: UpdateArticleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Article> {
        const response = await this.updateArticleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
